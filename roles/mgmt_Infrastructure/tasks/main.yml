---
# tasks file for mgmt_Infrastructure
#
# Author: Walter Karl
# Date: Februar.2024
# Company:
#
#
#################################################
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --limit svr-infratoolz --extra-vars "v_role=infra" --tags opnPorts
#################################################
- name: Open ports for technitium task
  block:
    - name: Open ports for technitium section
      ansible.posix.firewalld:
        port: "{{ item }}"
        zone: public
        state: enabled
        immediate: true
        permanent: true
      loop:
        # Technitium
        - 53/tcp
        - 53/udp
        - 5300/tcp
        # Traefik
        - 80/tcp
        - 443/tcp
        - 8080/tcp
        # netboot.xyz
        - 3000/tcp
        - 69/udp
        - 9080/tcp
      register: PortsOutput
    - name: Print PortsOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ PortsOutput }}"
        verbosity: 2
  # Tags
  tags:
    # - crtDNS
    - opnPorts
################################################
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --limit svr-infratoolz --extra-vars "v_role=infra" --tags crtInfraNet
#################################################
- name: Create container network task
  block:
    - name: Create container network section
      containers.podman.podman_network:
        name: infra_net
      become: true
      register: NetworkOutput
    - name: Print NetworkOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ NetworkOutput }}"
        verbosity: 2
  tags:
    - crtInfraNet
#################################################
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --limit svr-infratoolz --extra-vars "v_role=infra" --tags crtDNS
#################################################
- name: Create technitium DNS server container task
  block:
    - name: Create technitium DNS server container section
      containers.podman.podman_container:
        name: c_dns
        image: docker.io/technitium/dns-server:latest
        hostname: svr-dns
        volumes:
          - dnsconf:/etc/dns
        ports:
          - 5380:5380/tcp #DNS web console (HTTP)
          # - "53443:53443/tcp" #DNS web console (HTTPS)
          - 53:53/udp #DNS service
          - 53:53/tcp #DNS service
          # - "853:853/udp" #DNS-over-QUIC service
          # - "853:853/tcp" #DNS-over-TLS service
          # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
          # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
          # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
          # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
          # - "67:67/udp" #DHCP service  
        env:
          DNS_SERVER_DOMAIN: svr-dns #The primary domain name used by this DNS Server to identify itself.
          # DNS_SERVER_ADMIN_PASSWORD: ******** #DNS web console admin user password.
          # DNS_SERVER_ADMIN_PASSWORD_FILE: password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
          # DNS_SERVER_PREFER_IPV6: false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
          DNS_SERVER_WEB_SERVICE_HTTP_PORT: 5380 #The TCP port number for the DNS web console over HTTP protocol.
          DNS_SERVER_WEB_SERVICE_HTTPS_PORT: 53443 #The TCP port number for the DNS web console over HTTPS protocol.
          # DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS: false #Enables HTTPS for the DNS web console.
          # DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT: false #Enables self signed TLS certificate for the DNS web console.
          # DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP: false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
          # DNS_SERVER_RECURSION: AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworks.
          # DNS_SERVER_RECURSION_DENIED_NETWORKS: 1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworks` recursion option.
          # DNS_SERVER_RECURSION_ALLOWED_NETWORKS: 127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworks` recursion option.
          # DNS_SERVER_ENABLE_BLOCKING: false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
          # DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT: false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
          # DNS_SERVER_BLOCK_LIST_URLS:  #A comma separated list of block list URLs.
          DNS_SERVER_FORWARDERS: 1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
          # DNS_SERVER_FORWARDER_PROTOCOL: Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
          # DNS_SERVER_LOG_USING_LOCAL_TIME: true #Enable this option to use local time instead of UTC for logging.
        debug: false
        restart_policy: on-failure:3
        state: started
        recreate: false
      register: DNSOutput
    - name: Print DNSOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ DNSOutput }}"
        verbosity: 0
  # Tags
  tags:
    - crtDNS

#################################################
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --limit svr-infratoolz --extra-vars "v_role=infra" --tags updDNS
#################################################
- name: Update technitium DNS server container task
  block:
    - name: Recreate technitium DNS server container section
      containers.podman.podman_container:
        name: c_dns
        image: docker.io/technitium/dns-server:latest
        hostname: svr-dns
        volumes:
          - dnsconf:/etc/dns
        ports:
          - 5380:5380/tcp #DNS web console (HTTP)
          # - "53443:53443/tcp" #DNS web console (HTTPS)
          - 53:53/udp #DNS service
          - 53:53/tcp #DNS service
          # - "853:853/udp" #DNS-over-QUIC service
          # - "853:853/tcp" #DNS-over-TLS service
          # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
          # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
          # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
          # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
          # - "67:67/udp" #DHCP service  
        env:
          DNS_SERVER_DOMAIN: svr-dns #The primary domain name used by this DNS Server to identify itself.
          # DNS_SERVER_ADMIN_PASSWORD: ******** #DNS web console admin user password.
          # DNS_SERVER_ADMIN_PASSWORD_FILE: password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
          # DNS_SERVER_PREFER_IPV6: false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
          DNS_SERVER_WEB_SERVICE_HTTP_PORT: 5380 #The TCP port number for the DNS web console over HTTP protocol.
          DNS_SERVER_WEB_SERVICE_HTTPS_PORT: 53443 #The TCP port number for the DNS web console over HTTPS protocol.
          # DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS: false #Enables HTTPS for the DNS web console.
          # DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT: false #Enables self signed TLS certificate for the DNS web console.
          # DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP: false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
          # DNS_SERVER_RECURSION: AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworks.
          # DNS_SERVER_RECURSION_DENIED_NETWORKS: 1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworks` recursion option.
          # DNS_SERVER_RECURSION_ALLOWED_NETWORKS: 127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworks` recursion option.
          # DNS_SERVER_ENABLE_BLOCKING: false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
          # DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT: false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
          # DNS_SERVER_BLOCK_LIST_URLS:  #A comma separated list of block list URLs.
          DNS_SERVER_FORWARDERS: 1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
          # DNS_SERVER_FORWARDER_PROTOCOL: Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
          # DNS_SERVER_LOG_USING_LOCAL_TIME: true #Enable this option to use local time instead of UTC for logging.
        debug: false
        restart_policy: on-failure:3
        state: started
        recreate: true
      register: UpdatedDNSOutput
    - name: Print UpdatedDNSOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ UpdatedDNSOutput }}"
        verbosity: 0
  # Tags
  tags:
    - updDNS


#################################################
# MARK: Create Technitium Container
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --limit svr-infratoolz --extra-vars "v_role=infra" --tags crtNetBoot
#################################################
- name: Create technitium DNS server container task
  block:
    - name: Create technitium DNS server container section
      containers.podman.podman_container:
        name: c_netbootxyz
        image: lscr.io/linuxserver/netbootxyz:latest
        hostname: svr-netbootxyz
        volumes:
          - config:/config
          - assets:/assets
        ports:
          - 3000:3000/tcp #
          - 69:69/udp #
          - 9080:80/tcp #
        env:
          PUID: 1000
          GUID: 1000
          TZ: Europe/Berlin
          # MENU_VERSION:
          PORT_RANGE: 30000:30010
          SUBFOLDER: /
        debug: false
        restart_policy: on-failure:3
        state: started
        recreate: false
      register: NetBootOutput
    - name: Print NetBootOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ NetBootOutput }}"
        verbosity: 0
  # Tags
  tags:
    - crtNetBoot



################################################
# NOT YET FINISHED!
#################################################
################################################
#
#################################################
- name: Copy traefik config file task
  block:
    - name: Copy traefik config file section
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: 0644
      loop:
        - src: traefik.yml
          dest: /root/container/traefik/traefik.yml
        - src: traefik_prov.yml
          dest: /root/container/traefik/traefik_prov.yml
      register: TrfkConfOutput
    - name: Print TrfkConfOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ TrfkConfOutput }}"
        verbosity: 2
  tags:
    - cpyTrfkConf
#################################################
#
# ansible-playbook ./pb.mgmtHomeInfrastructure.yml --extra-vars "v_role=infra" --tags crtDNS
#
#################################################
- name: Create Traefik proxy server container task
  block:
    - name: Create Traefik proxy server container section
      containers.podman.podman_container:
        name: c_traefik
        image: docker.io/traefik:v3.0
        hostname: svr-traefik
        # command:
        #   - --api.insecure=true
          # entrypoints, static configuratiion
          # - --entryPoints.web.address=:80
          # - --entryPoints.websecure.address=:443
        #   # - --entryPoints.streaming.address=:1704/udp # example
        #   #
        #   - --providers.http.endpoint=http://esxi.home.lcl
        #   - --providers.http.pollInterval=5s
        #   - --providers.http.pollTimeout=5s
        #   # - --providers.http.tls.ca=path/to/ca.crt # optional
        #   # - --providers.http.tls.cert=path/to/foo.cert # optional public certificate
        #   # - --providers.http.tls.key=path/to/foo.key # optional public certificate
        #   # - --providers.http.tls.cert=path/to/foo.cert # optional private key
        #   # - --providers.http.tls.key=path/to/foo.key # optional private key
        #   - --providers.http.tls.insecureSkipVerify=true # default=false

        # labels:
        #   - traefik.routers.rule=Host(`svr-esxi.home.lcl`)
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /var/run/podman/podman.sock:/var/run/docker.sock:ro
          - /root/container/traefik/traefik.yml:/traefik.yml:ro
          - /root/container/traefik/traefik_prov.yml:/etc/traefik_prov.yml
          - /root/container/traefik/traefik.log:/var/log/traefik.log
        ports:
          - 80:80
          - 443:443
          - 8080:8080
        network:
          - infra_net
        debug: false
        restart_policy: on-failure:3
        state: started
      register: TraefikOutput
    - name: Print TraefikOutput
      debug:
        msg:
          - "<<<<< Output >>>>>"
          - "{{ TraefikOutput }}"
        verbosity: 0
  # Tags
  tags:
    - crtTrfk
